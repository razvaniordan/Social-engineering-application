# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# User credentials for platform login
# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# First admin created via initdb.js
USERNAME = razvan                       # Username (server/seed/initdb.js)
PASSWORD = razvan                       # Password - at each run it will display 'Admin password updated' even if the password will be the same.
DROP_DB = false                         # Set to 'true' if you want to drop all tables and recreate them on application startup
DROP_USER_DB = true                    # Set to 'true' if you want to drop only the Users table and recreate it on application startup

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# Database connection (MySQL)
# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
DB_NAME = social_engineering_app        # Database schema name -> same as MYSQL_DATABASE (server/models/index.js)
DB_USER = root                          # Database username -> matches the MySQL user you intend to log in with
DB_PASS = razvan                        # Database password -> same password you passed in MYSQL_ROOT_PASSWORD

# If you run the stack with Docker‑Compose, 
# use the service name **mysql** because other containers resolve that via Docker DNS.
# If you are running the Node app directly on your laptop (no Docker), 
# use 127.0.0.1 or localhost.
DB_HOST = mysql                         # use "mysql" inside Docker, "127.0.0.1" locally

# Inside the MySQL container the server listens on port 3306.
# In docker‑compose.yml we map host‑port 3307 → container‑port 3306,
# but containers themselves must still use 3306.                                        
DB_PORT = 3306                          # container port (leave 3306 for Docker)
                                        # host-port is 3307 even locally just to avoid collision with other potential opened mysql servers

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# Redis
# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
REDIS_URL = redis://redis:6379          # inside Docker; use 'redis://127.0.0.1:6379' when running locally (server/jobs/emailWorkers.js)

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# Application ports
# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
SERVER_PORT = 3000                      # Express API port (server/index.js)
PHISHING_PORT = 4000                    # Phishing-server port (phishing-server/index.js)

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# JWT Secrets
# Generate with:  node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
ACCESS_TOKEN_SECRET =                   # 128-char hex string (64 random bytes) (server/middlewares/authMiddleware.js && server/services/tokenHelper.js)
REFRESH_TOKEN_SECRET =                  # 128-char hex string (another 64 bytes) (server/routes/authRoutes.js)
